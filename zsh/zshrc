# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# zstyle ':omz:lib:*' aliases no
zstyle ':omz:*' aliases no


# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

### MY CUSTOM CONFIG

# Enable Vim mode in zsh
bindkey -v

# Set Vim as editor of choice
export EDITOR=nvim

###################
##### Aliases #####
###################

# Bundler related aliases
alias ba="bundle add"
alias be="bundle exec"
alias bi="bundle install"

# Dir navigation aliases
alias cdc="cd ~/code"
alias cddf="cd ~/code/dotfiles"

# Git related aliases
alias ga="git add"
alias gap="git add -p"
alias gb="git branch"
alias gbd="git branch -D"
alias gbn="git checkout -b"
alias gc="git commit -m"
alias gco="git checkout"
alias gd="git diff"
alias gfix="vim -p +/HEAD \$(git diff --name-only | uniq)"
alias gl="git log"
alias gr="git remote -v"
alias gs="git status"

# Rails related aliases
alias bd="bin/dev"
alias br="bin/rails"
alias rc="bin/rails console"
alias rce="bin/rails credentials:edit -e"
alias rcl="bin/rails tmp:clear && bin/rails log:clear"
alias rclt="RAILS_ENV=test bin/rails tmp:clear && RAILS_ENV=test bin/rails log:clear"
alias rcs="bin/rails console -s"
alias rdbcon="bin/rails dbconsole"
alias rdbc="bin/rails db:create"
alias rdbfl="bin/rails db:fixtures:load"
alias rdbm="bin/rails db:migrate"
alias rdbms="bin/rails db:migrate:status"
alias rdbrs="bin/rails db:reset"
alias rdbrb="bin/rails db:rollback"
alias rdbs="bin/rails db:seed"
alias rd="bin/rails d"
alias rdcon="bin/rails d controller"
alias rdchan="bin/rails d channel"
alias rdit="bin/rails d integration_test"
alias rdjob="bin/rails d job"
alias rdmail="bin/rails d mailer"
alias rdmod="bin/rails d model"
alias rdmt="bin/rails d test_unit:model"
alias rdmig="bin/rails d migration"
alias rdres="bin/rails d resource"
alias rdscaf="bin/rails d scaffold"
alias rdst="bin/rails d system_test"
alias rdstim="bin/rails d stimulus"
alias rg="bin/rails g"
alias rgcon="bin/rails g controller"
alias rgchan="bin/rails g channel"
alias rgit="bin/rails g integration_test"
alias rgjob="bin/rails g job"
alias rgmail="bin/rails g mailer"
alias rgmod="bin/rails g model"
alias rgmt="bin/rails g test_unit:model"
alias rgmig="bin/rails g migration"
alias rgres="bin/rails g resource"
alias rgscaf="bin/rails g scaffold"
alias rgst="bin/rails g system_test"
alias rgstim="bin/rails g stimulus"
alias rr="bin/rails routes -g"
alias rs="bin/rails server"
alias rt="bin/rails test"
alias rta="bin/rails test:all"
alias rtc="bin/rails test:controllers"
alias rti="bin/rails test:integration"
alias rtm="bin/rails test:models"
alias rts="bin/rails test:system"

# Redis related aliases
alias reds="redis-server"

# Standard related aliases
alias sf="standardrb --fix"
alias srb="standardrb"

# Lint
alias lint="standardrb --fix && erblint --lint-all -a"

# Yarn related aliases
alias yi="yarn install"

# Shell related aliases
alias h="history"
alias ls="ls -lahF --color"

# Overmind related aliases
alias ocw="overmind connect web"

# VSCode related aliases
alias c="code ."

#####################
##### Functions #####
#####################

# Git related functions
gac () {
  if [[ $# > 1 ]]; then
    git add $1 && git commit -m $2
  else
    git add . && git commit -m $1
  fi
}

gf () {
  CURRENT_BRANCH=$(git branch --show-current)

  if [[ $# > 1 ]]; then
    git fetch $@
  elif [[ $# == 1 ]]; then
    git fetch $1 ${CURRENT_BRANCH}
  else
    git fetch origin ${CURRENT_BRANCH}
  fi
}

gp () {
  CURRENT_BRANCH=$(git branch --show-current)

  if [[ $# > 1 ]]; then
    git push $@
  elif [[ $# == 1 ]]; then
    git push $1 ${CURRENT_BRANCH}
  else
    git push origin ${CURRENT_BRANCH}
  fi
}

gpl () {
  CURRENT_BRANCH=$(git branch --show-current)

  if [[ $# == 1 ]]; then
    git pull $1 ${CURRENT_BRANCH}
  elif [[ $# > 1 ]]; then
    git pull $@
  else
    git pull origin ${CURRENT_BRANCH}
  fi
}

# Vim related functions
v () {
  if [[ $# == 1 ]]; then
    vim $1
  elif [[ $# > 1 ]]; then
    vim -O $@
  else
    vim .
  fi
}

nv () {
  if [[ $# == 1 ]]; then
    nvim $1
  elif [[ $# > 1 ]]; then
    nvim -O $@
  else
    nvim .
  fi
}

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
export PATH="/opt/homebrew/opt/postgresql@16/bin:$PATH"

. /opt/homebrew/opt/asdf/libexec/asdf.sh
. "$HOME/.asdf/asdf.sh"
. "$HOME/.asdf/completions/asdf.bash"
